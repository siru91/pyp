{"ast":null,"code":"const findCacheDir = require('find-cache-dir');\n\nconst Git = require('./git');\n\nconst filenamify = require('filenamify');\n\nconst copy = require('./util').copy;\n\nconst getUser = require('./util').getUser;\n\nconst fs = require('fs-extra');\n\nconst globby = require('globby');\n\nconst path = require('path');\n\nconst util = require('util');\n\nconst log = util.debuglog('gh-pages');\n/**\n * Get the cache directory.\n * @param {string} [optPath] Optional path.\n * @returns {string} The full path to the cache directory.\n */\n\nfunction getCacheDir(optPath) {\n  const dir = findCacheDir({\n    name: 'gh-pages'\n  });\n\n  if (!optPath) {\n    return dir;\n  }\n\n  return path.join(dir, filenamify(optPath));\n}\n\nexports.getCacheDir = getCacheDir;\n\nfunction getRepo(options) {\n  if (options.repo) {\n    return Promise.resolve(options.repo);\n  } else {\n    const git = new Git(process.cwd(), options.git);\n    return git.getRemoteUrl(options.remote);\n  }\n}\n\nexports.defaults = {\n  dest: '.',\n  add: false,\n  git: 'git',\n  depth: 1,\n  dotfiles: false,\n  branch: 'gh-pages',\n  remote: 'origin',\n  src: '**/*',\n  remove: '.',\n  push: true,\n  history: true,\n  message: 'Updates',\n  silent: false\n};\n/**\n * Push a git branch to a remote (pushes gh-pages by default).\n * @param {string} basePath The base path.\n * @param {Object} config Publish options.\n * @param {Function} callback Callback.\n */\n\nexports.publish = function publish(basePath, config, callback) {\n  if (typeof config === 'function') {\n    callback = config;\n    config = {};\n  }\n\n  const options = Object.assign({}, exports.defaults, config); // For backward compatibility before fixing #334\n\n  if (options.only) {\n    options.remove = options.only;\n  }\n\n  if (!callback) {\n    callback = function (err) {\n      if (err) {\n        log(err.message);\n      }\n    };\n  }\n\n  function done(err) {\n    try {\n      callback(err);\n    } catch (err2) {\n      log('Publish callback threw: %s', err2.message);\n    }\n  }\n\n  try {\n    if (!fs.statSync(basePath).isDirectory()) {\n      done(new Error('The \"base\" option must be an existing directory'));\n      return;\n    }\n  } catch (err) {\n    done(err);\n    return;\n  }\n\n  const files = globby.sync(options.src, {\n    cwd: basePath,\n    dot: options.dotfiles\n  }).filter(file => {\n    return !fs.statSync(path.join(basePath, file)).isDirectory();\n  });\n\n  if (!Array.isArray(files) || files.length === 0) {\n    done(new Error('The pattern in the \"src\" property didn\\'t match any files.'));\n    return;\n  }\n\n  let repoUrl;\n  let userPromise;\n\n  if (options.user) {\n    userPromise = Promise.resolve(options.user);\n  } else {\n    userPromise = getUser();\n  }\n\n  return userPromise.then(user => getRepo(options).then(repo => {\n    repoUrl = repo;\n    const clone = getCacheDir(repo);\n    log('Cloning %s into %s', repo, clone);\n    return Git.clone(repo, clone, options.branch, options);\n  }).then(git => {\n    return git.getRemoteUrl(options.remote).then(url => {\n      if (url !== repoUrl) {\n        const message = 'Remote url mismatch.  Got \"' + url + '\" ' + 'but expected \"' + repoUrl + '\" in ' + git.cwd + '.  Try running the `gh-pages-clean` script first.';\n        throw new Error(message);\n      }\n\n      return git;\n    });\n  }).then(git => {\n    // only required if someone mucks with the checkout between builds\n    log('Cleaning');\n    return git.clean();\n  }).then(git => {\n    log('Fetching %s', options.remote);\n    return git.fetch(options.remote);\n  }).then(git => {\n    log('Checking out %s/%s ', options.remote, options.branch);\n    return git.checkout(options.remote, options.branch);\n  }).then(git => {\n    if (!options.history) {\n      return git.deleteRef(options.branch);\n    } else {\n      return git;\n    }\n  }).then(git => {\n    if (options.add) {\n      return git;\n    }\n\n    log('Removing files');\n    const files = globby.sync(options.remove, {\n      cwd: path.join(git.cwd, options.dest)\n    }).map(file => path.join(options.dest, file));\n\n    if (files.length > 0) {\n      return git.rm(files);\n    } else {\n      return git;\n    }\n  }).then(git => {\n    log('Copying files');\n    return copy(files, basePath, path.join(git.cwd, options.dest)).then(function () {\n      return git;\n    });\n  }).then(git => {\n    return Promise.resolve(options.beforeAdd && options.beforeAdd(git)).then(() => git);\n  }).then(git => {\n    log('Adding all');\n    return git.add('.');\n  }).then(git => {\n    if (!user) {\n      return git;\n    }\n\n    return git.exec('config', 'user.email', user.email).then(() => {\n      if (!user.name) {\n        return git;\n      }\n\n      return git.exec('config', 'user.name', user.name);\n    });\n  }).then(git => {\n    log('Committing');\n    return git.commit(options.message);\n  }).then(git => {\n    if (options.tag) {\n      log('Tagging');\n      return git.tag(options.tag).catch(error => {\n        // tagging failed probably because this tag alredy exists\n        log(error);\n        log('Tagging failed, continuing');\n        return git;\n      });\n    } else {\n      return git;\n    }\n  }).then(git => {\n    if (options.push) {\n      log('Pushing');\n      return git.push(options.remote, options.branch, !options.history);\n    } else {\n      return git;\n    }\n  }).then(() => done(), error => {\n    if (options.silent) {\n      error = new Error('Unspecified error (run without silent option for detail)');\n    }\n\n    done(error);\n  }));\n};\n/**\n * Clean the cache directory.\n */\n\n\nexports.clean = function clean() {\n  fs.removeSync(getCacheDir());\n};","map":{"version":3,"sources":["C:/Users/tlvud/Desktop/react-web/pyp/node_modules/gh-pages/lib/index.js"],"names":["findCacheDir","require","Git","filenamify","copy","getUser","fs","globby","path","util","log","debuglog","getCacheDir","optPath","dir","name","join","exports","getRepo","options","repo","Promise","resolve","git","process","cwd","getRemoteUrl","remote","defaults","dest","add","depth","dotfiles","branch","src","remove","push","history","message","silent","publish","basePath","config","callback","Object","assign","only","err","done","err2","statSync","isDirectory","Error","files","sync","dot","filter","file","Array","isArray","length","repoUrl","userPromise","user","then","clone","url","clean","fetch","checkout","deleteRef","map","rm","beforeAdd","exec","email","commit","tag","catch","error","removeSync"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA5B;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,OAAD,CAAnB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,QAAD,CAAP,CAAkBG,IAA/B;;AACA,MAAMC,OAAO,GAAGJ,OAAO,CAAC,QAAD,CAAP,CAAkBI,OAAlC;;AACA,MAAMC,EAAE,GAAGL,OAAO,CAAC,UAAD,CAAlB;;AACA,MAAMM,MAAM,GAAGN,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMO,IAAI,GAAGP,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMQ,IAAI,GAAGR,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMS,GAAG,GAAGD,IAAI,CAACE,QAAL,CAAc,UAAd,CAAZ;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAqBC,OAArB,EAA8B;AAC5B,QAAMC,GAAG,GAAGd,YAAY,CAAC;AAACe,IAAAA,IAAI,EAAE;AAAP,GAAD,CAAxB;;AACA,MAAI,CAACF,OAAL,EAAc;AACZ,WAAOC,GAAP;AACD;;AAED,SAAON,IAAI,CAACQ,IAAL,CAAUF,GAAV,EAAeX,UAAU,CAACU,OAAD,CAAzB,CAAP;AACD;;AACDI,OAAO,CAACL,WAAR,GAAsBA,WAAtB;;AAEA,SAASM,OAAT,CAAiBC,OAAjB,EAA0B;AACxB,MAAIA,OAAO,CAACC,IAAZ,EAAkB;AAChB,WAAOC,OAAO,CAACC,OAAR,CAAgBH,OAAO,CAACC,IAAxB,CAAP;AACD,GAFD,MAEO;AACL,UAAMG,GAAG,GAAG,IAAIrB,GAAJ,CAAQsB,OAAO,CAACC,GAAR,EAAR,EAAuBN,OAAO,CAACI,GAA/B,CAAZ;AACA,WAAOA,GAAG,CAACG,YAAJ,CAAiBP,OAAO,CAACQ,MAAzB,CAAP;AACD;AACF;;AAEDV,OAAO,CAACW,QAAR,GAAmB;AACjBC,EAAAA,IAAI,EAAE,GADW;AAEjBC,EAAAA,GAAG,EAAE,KAFY;AAGjBP,EAAAA,GAAG,EAAE,KAHY;AAIjBQ,EAAAA,KAAK,EAAE,CAJU;AAKjBC,EAAAA,QAAQ,EAAE,KALO;AAMjBC,EAAAA,MAAM,EAAE,UANS;AAOjBN,EAAAA,MAAM,EAAE,QAPS;AAQjBO,EAAAA,GAAG,EAAE,MARY;AASjBC,EAAAA,MAAM,EAAE,GATS;AAUjBC,EAAAA,IAAI,EAAE,IAVW;AAWjBC,EAAAA,OAAO,EAAE,IAXQ;AAYjBC,EAAAA,OAAO,EAAE,SAZQ;AAajBC,EAAAA,MAAM,EAAE;AAbS,CAAnB;AAgBA;AACA;AACA;AACA;AACA;AACA;;AACAtB,OAAO,CAACuB,OAAR,GAAkB,SAASA,OAAT,CAAiBC,QAAjB,EAA2BC,MAA3B,EAAmCC,QAAnC,EAA6C;AAC7D,MAAI,OAAOD,MAAP,KAAkB,UAAtB,EAAkC;AAChCC,IAAAA,QAAQ,GAAGD,MAAX;AACAA,IAAAA,MAAM,GAAG,EAAT;AACD;;AAED,QAAMvB,OAAO,GAAGyB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB5B,OAAO,CAACW,QAA1B,EAAoCc,MAApC,CAAhB,CAN6D,CAQ7D;;AACA,MAAIvB,OAAO,CAAC2B,IAAZ,EAAkB;AAChB3B,IAAAA,OAAO,CAACgB,MAAR,GAAiBhB,OAAO,CAAC2B,IAAzB;AACD;;AAED,MAAI,CAACH,QAAL,EAAe;AACbA,IAAAA,QAAQ,GAAG,UAASI,GAAT,EAAc;AACvB,UAAIA,GAAJ,EAAS;AACPrC,QAAAA,GAAG,CAACqC,GAAG,CAACT,OAAL,CAAH;AACD;AACF,KAJD;AAKD;;AAED,WAASU,IAAT,CAAcD,GAAd,EAAmB;AACjB,QAAI;AACFJ,MAAAA,QAAQ,CAACI,GAAD,CAAR;AACD,KAFD,CAEE,OAAOE,IAAP,EAAa;AACbvC,MAAAA,GAAG,CAAC,4BAAD,EAA+BuC,IAAI,CAACX,OAApC,CAAH;AACD;AACF;;AAED,MAAI;AACF,QAAI,CAAChC,EAAE,CAAC4C,QAAH,CAAYT,QAAZ,EAAsBU,WAAtB,EAAL,EAA0C;AACxCH,MAAAA,IAAI,CAAC,IAAII,KAAJ,CAAU,iDAAV,CAAD,CAAJ;AACA;AACD;AACF,GALD,CAKE,OAAOL,GAAP,EAAY;AACZC,IAAAA,IAAI,CAACD,GAAD,CAAJ;AACA;AACD;;AAED,QAAMM,KAAK,GAAG9C,MAAM,CACjB+C,IADW,CACNnC,OAAO,CAACe,GADF,EACO;AACjBT,IAAAA,GAAG,EAAEgB,QADY;AAEjBc,IAAAA,GAAG,EAAEpC,OAAO,CAACa;AAFI,GADP,EAKXwB,MALW,CAKJC,IAAI,IAAI;AACd,WAAO,CAACnD,EAAE,CAAC4C,QAAH,CAAY1C,IAAI,CAACQ,IAAL,CAAUyB,QAAV,EAAoBgB,IAApB,CAAZ,EAAuCN,WAAvC,EAAR;AACD,GAPW,CAAd;;AASA,MAAI,CAACO,KAAK,CAACC,OAAN,CAAcN,KAAd,CAAD,IAAyBA,KAAK,CAACO,MAAN,KAAiB,CAA9C,EAAiD;AAC/CZ,IAAAA,IAAI,CACF,IAAII,KAAJ,CAAU,4DAAV,CADE,CAAJ;AAGA;AACD;;AAED,MAAIS,OAAJ;AACA,MAAIC,WAAJ;;AACA,MAAI3C,OAAO,CAAC4C,IAAZ,EAAkB;AAChBD,IAAAA,WAAW,GAAGzC,OAAO,CAACC,OAAR,CAAgBH,OAAO,CAAC4C,IAAxB,CAAd;AACD,GAFD,MAEO;AACLD,IAAAA,WAAW,GAAGzD,OAAO,EAArB;AACD;;AACD,SAAOyD,WAAW,CAACE,IAAZ,CAAiBD,IAAI,IAC1B7C,OAAO,CAACC,OAAD,CAAP,CACG6C,IADH,CACQ5C,IAAI,IAAI;AACZyC,IAAAA,OAAO,GAAGzC,IAAV;AACA,UAAM6C,KAAK,GAAGrD,WAAW,CAACQ,IAAD,CAAzB;AACAV,IAAAA,GAAG,CAAC,oBAAD,EAAuBU,IAAvB,EAA6B6C,KAA7B,CAAH;AACA,WAAO/D,GAAG,CAAC+D,KAAJ,CAAU7C,IAAV,EAAgB6C,KAAhB,EAAuB9C,OAAO,CAACc,MAA/B,EAAuCd,OAAvC,CAAP;AACD,GANH,EAOG6C,IAPH,CAOQzC,GAAG,IAAI;AACX,WAAOA,GAAG,CAACG,YAAJ,CAAiBP,OAAO,CAACQ,MAAzB,EAAiCqC,IAAjC,CAAsCE,GAAG,IAAI;AAClD,UAAIA,GAAG,KAAKL,OAAZ,EAAqB;AACnB,cAAMvB,OAAO,GACX,gCACA4B,GADA,GAEA,IAFA,GAGA,gBAHA,GAIAL,OAJA,GAKA,OALA,GAMAtC,GAAG,CAACE,GANJ,GAOA,mDARF;AASA,cAAM,IAAI2B,KAAJ,CAAUd,OAAV,CAAN;AACD;;AACD,aAAOf,GAAP;AACD,KAdM,CAAP;AAeD,GAvBH,EAwBGyC,IAxBH,CAwBQzC,GAAG,IAAI;AACX;AACAb,IAAAA,GAAG,CAAC,UAAD,CAAH;AACA,WAAOa,GAAG,CAAC4C,KAAJ,EAAP;AACD,GA5BH,EA6BGH,IA7BH,CA6BQzC,GAAG,IAAI;AACXb,IAAAA,GAAG,CAAC,aAAD,EAAgBS,OAAO,CAACQ,MAAxB,CAAH;AACA,WAAOJ,GAAG,CAAC6C,KAAJ,CAAUjD,OAAO,CAACQ,MAAlB,CAAP;AACD,GAhCH,EAiCGqC,IAjCH,CAiCQzC,GAAG,IAAI;AACXb,IAAAA,GAAG,CAAC,qBAAD,EAAwBS,OAAO,CAACQ,MAAhC,EAAwCR,OAAO,CAACc,MAAhD,CAAH;AACA,WAAOV,GAAG,CAAC8C,QAAJ,CAAalD,OAAO,CAACQ,MAArB,EAA6BR,OAAO,CAACc,MAArC,CAAP;AACD,GApCH,EAqCG+B,IArCH,CAqCQzC,GAAG,IAAI;AACX,QAAI,CAACJ,OAAO,CAACkB,OAAb,EAAsB;AACpB,aAAOd,GAAG,CAAC+C,SAAJ,CAAcnD,OAAO,CAACc,MAAtB,CAAP;AACD,KAFD,MAEO;AACL,aAAOV,GAAP;AACD;AACF,GA3CH,EA4CGyC,IA5CH,CA4CQzC,GAAG,IAAI;AACX,QAAIJ,OAAO,CAACW,GAAZ,EAAiB;AACf,aAAOP,GAAP;AACD;;AAEDb,IAAAA,GAAG,CAAC,gBAAD,CAAH;AACA,UAAM2C,KAAK,GAAG9C,MAAM,CACjB+C,IADW,CACNnC,OAAO,CAACgB,MADF,EACU;AACpBV,MAAAA,GAAG,EAAEjB,IAAI,CAACQ,IAAL,CAAUO,GAAG,CAACE,GAAd,EAAmBN,OAAO,CAACU,IAA3B;AADe,KADV,EAIX0C,GAJW,CAIPd,IAAI,IAAIjD,IAAI,CAACQ,IAAL,CAAUG,OAAO,CAACU,IAAlB,EAAwB4B,IAAxB,CAJD,CAAd;;AAKA,QAAIJ,KAAK,CAACO,MAAN,GAAe,CAAnB,EAAsB;AACpB,aAAOrC,GAAG,CAACiD,EAAJ,CAAOnB,KAAP,CAAP;AACD,KAFD,MAEO;AACL,aAAO9B,GAAP;AACD;AACF,GA5DH,EA6DGyC,IA7DH,CA6DQzC,GAAG,IAAI;AACXb,IAAAA,GAAG,CAAC,eAAD,CAAH;AACA,WAAON,IAAI,CAACiD,KAAD,EAAQZ,QAAR,EAAkBjC,IAAI,CAACQ,IAAL,CAAUO,GAAG,CAACE,GAAd,EAAmBN,OAAO,CAACU,IAA3B,CAAlB,CAAJ,CAAwDmC,IAAxD,CACL,YAAW;AACT,aAAOzC,GAAP;AACD,KAHI,CAAP;AAKD,GApEH,EAqEGyC,IArEH,CAqEQzC,GAAG,IAAI;AACX,WAAOF,OAAO,CAACC,OAAR,CACLH,OAAO,CAACsD,SAAR,IAAqBtD,OAAO,CAACsD,SAAR,CAAkBlD,GAAlB,CADhB,EAELyC,IAFK,CAEA,MAAMzC,GAFN,CAAP;AAGD,GAzEH,EA0EGyC,IA1EH,CA0EQzC,GAAG,IAAI;AACXb,IAAAA,GAAG,CAAC,YAAD,CAAH;AACA,WAAOa,GAAG,CAACO,GAAJ,CAAQ,GAAR,CAAP;AACD,GA7EH,EA8EGkC,IA9EH,CA8EQzC,GAAG,IAAI;AACX,QAAI,CAACwC,IAAL,EAAW;AACT,aAAOxC,GAAP;AACD;;AACD,WAAOA,GAAG,CAACmD,IAAJ,CAAS,QAAT,EAAmB,YAAnB,EAAiCX,IAAI,CAACY,KAAtC,EAA6CX,IAA7C,CAAkD,MAAM;AAC7D,UAAI,CAACD,IAAI,CAAChD,IAAV,EAAgB;AACd,eAAOQ,GAAP;AACD;;AACD,aAAOA,GAAG,CAACmD,IAAJ,CAAS,QAAT,EAAmB,WAAnB,EAAgCX,IAAI,CAAChD,IAArC,CAAP;AACD,KALM,CAAP;AAMD,GAxFH,EAyFGiD,IAzFH,CAyFQzC,GAAG,IAAI;AACXb,IAAAA,GAAG,CAAC,YAAD,CAAH;AACA,WAAOa,GAAG,CAACqD,MAAJ,CAAWzD,OAAO,CAACmB,OAAnB,CAAP;AACD,GA5FH,EA6FG0B,IA7FH,CA6FQzC,GAAG,IAAI;AACX,QAAIJ,OAAO,CAAC0D,GAAZ,EAAiB;AACfnE,MAAAA,GAAG,CAAC,SAAD,CAAH;AACA,aAAOa,GAAG,CAACsD,GAAJ,CAAQ1D,OAAO,CAAC0D,GAAhB,EAAqBC,KAArB,CAA2BC,KAAK,IAAI;AACzC;AACArE,QAAAA,GAAG,CAACqE,KAAD,CAAH;AACArE,QAAAA,GAAG,CAAC,4BAAD,CAAH;AACA,eAAOa,GAAP;AACD,OALM,CAAP;AAMD,KARD,MAQO;AACL,aAAOA,GAAP;AACD;AACF,GAzGH,EA0GGyC,IA1GH,CA0GQzC,GAAG,IAAI;AACX,QAAIJ,OAAO,CAACiB,IAAZ,EAAkB;AAChB1B,MAAAA,GAAG,CAAC,SAAD,CAAH;AACA,aAAOa,GAAG,CAACa,IAAJ,CAASjB,OAAO,CAACQ,MAAjB,EAAyBR,OAAO,CAACc,MAAjC,EAAyC,CAACd,OAAO,CAACkB,OAAlD,CAAP;AACD,KAHD,MAGO;AACL,aAAOd,GAAP;AACD;AACF,GAjHH,EAkHGyC,IAlHH,CAmHI,MAAMhB,IAAI,EAnHd,EAoHI+B,KAAK,IAAI;AACP,QAAI5D,OAAO,CAACoB,MAAZ,EAAoB;AAClBwC,MAAAA,KAAK,GAAG,IAAI3B,KAAJ,CACN,0DADM,CAAR;AAGD;;AACDJ,IAAAA,IAAI,CAAC+B,KAAD,CAAJ;AACD,GA3HL,CADK,CAAP;AA+HD,CA7LD;AA+LA;AACA;AACA;;;AACA9D,OAAO,CAACkD,KAAR,GAAgB,SAASA,KAAT,GAAiB;AAC/B7D,EAAAA,EAAE,CAAC0E,UAAH,CAAcpE,WAAW,EAAzB;AACD,CAFD","sourcesContent":["const findCacheDir = require('find-cache-dir');\nconst Git = require('./git');\nconst filenamify = require('filenamify');\nconst copy = require('./util').copy;\nconst getUser = require('./util').getUser;\nconst fs = require('fs-extra');\nconst globby = require('globby');\nconst path = require('path');\nconst util = require('util');\n\nconst log = util.debuglog('gh-pages');\n\n/**\n * Get the cache directory.\n * @param {string} [optPath] Optional path.\n * @returns {string} The full path to the cache directory.\n */\nfunction getCacheDir(optPath) {\n  const dir = findCacheDir({name: 'gh-pages'});\n  if (!optPath) {\n    return dir;\n  }\n\n  return path.join(dir, filenamify(optPath));\n}\nexports.getCacheDir = getCacheDir;\n\nfunction getRepo(options) {\n  if (options.repo) {\n    return Promise.resolve(options.repo);\n  } else {\n    const git = new Git(process.cwd(), options.git);\n    return git.getRemoteUrl(options.remote);\n  }\n}\n\nexports.defaults = {\n  dest: '.',\n  add: false,\n  git: 'git',\n  depth: 1,\n  dotfiles: false,\n  branch: 'gh-pages',\n  remote: 'origin',\n  src: '**/*',\n  remove: '.',\n  push: true,\n  history: true,\n  message: 'Updates',\n  silent: false\n};\n\n/**\n * Push a git branch to a remote (pushes gh-pages by default).\n * @param {string} basePath The base path.\n * @param {Object} config Publish options.\n * @param {Function} callback Callback.\n */\nexports.publish = function publish(basePath, config, callback) {\n  if (typeof config === 'function') {\n    callback = config;\n    config = {};\n  }\n\n  const options = Object.assign({}, exports.defaults, config);\n\n  // For backward compatibility before fixing #334\n  if (options.only) {\n    options.remove = options.only;\n  }\n\n  if (!callback) {\n    callback = function(err) {\n      if (err) {\n        log(err.message);\n      }\n    };\n  }\n\n  function done(err) {\n    try {\n      callback(err);\n    } catch (err2) {\n      log('Publish callback threw: %s', err2.message);\n    }\n  }\n\n  try {\n    if (!fs.statSync(basePath).isDirectory()) {\n      done(new Error('The \"base\" option must be an existing directory'));\n      return;\n    }\n  } catch (err) {\n    done(err);\n    return;\n  }\n\n  const files = globby\n    .sync(options.src, {\n      cwd: basePath,\n      dot: options.dotfiles\n    })\n    .filter(file => {\n      return !fs.statSync(path.join(basePath, file)).isDirectory();\n    });\n\n  if (!Array.isArray(files) || files.length === 0) {\n    done(\n      new Error('The pattern in the \"src\" property didn\\'t match any files.')\n    );\n    return;\n  }\n\n  let repoUrl;\n  let userPromise;\n  if (options.user) {\n    userPromise = Promise.resolve(options.user);\n  } else {\n    userPromise = getUser();\n  }\n  return userPromise.then(user =>\n    getRepo(options)\n      .then(repo => {\n        repoUrl = repo;\n        const clone = getCacheDir(repo);\n        log('Cloning %s into %s', repo, clone);\n        return Git.clone(repo, clone, options.branch, options);\n      })\n      .then(git => {\n        return git.getRemoteUrl(options.remote).then(url => {\n          if (url !== repoUrl) {\n            const message =\n              'Remote url mismatch.  Got \"' +\n              url +\n              '\" ' +\n              'but expected \"' +\n              repoUrl +\n              '\" in ' +\n              git.cwd +\n              '.  Try running the `gh-pages-clean` script first.';\n            throw new Error(message);\n          }\n          return git;\n        });\n      })\n      .then(git => {\n        // only required if someone mucks with the checkout between builds\n        log('Cleaning');\n        return git.clean();\n      })\n      .then(git => {\n        log('Fetching %s', options.remote);\n        return git.fetch(options.remote);\n      })\n      .then(git => {\n        log('Checking out %s/%s ', options.remote, options.branch);\n        return git.checkout(options.remote, options.branch);\n      })\n      .then(git => {\n        if (!options.history) {\n          return git.deleteRef(options.branch);\n        } else {\n          return git;\n        }\n      })\n      .then(git => {\n        if (options.add) {\n          return git;\n        }\n\n        log('Removing files');\n        const files = globby\n          .sync(options.remove, {\n            cwd: path.join(git.cwd, options.dest)\n          })\n          .map(file => path.join(options.dest, file));\n        if (files.length > 0) {\n          return git.rm(files);\n        } else {\n          return git;\n        }\n      })\n      .then(git => {\n        log('Copying files');\n        return copy(files, basePath, path.join(git.cwd, options.dest)).then(\n          function() {\n            return git;\n          }\n        );\n      })\n      .then(git => {\n        return Promise.resolve(\n          options.beforeAdd && options.beforeAdd(git)\n        ).then(() => git);\n      })\n      .then(git => {\n        log('Adding all');\n        return git.add('.');\n      })\n      .then(git => {\n        if (!user) {\n          return git;\n        }\n        return git.exec('config', 'user.email', user.email).then(() => {\n          if (!user.name) {\n            return git;\n          }\n          return git.exec('config', 'user.name', user.name);\n        });\n      })\n      .then(git => {\n        log('Committing');\n        return git.commit(options.message);\n      })\n      .then(git => {\n        if (options.tag) {\n          log('Tagging');\n          return git.tag(options.tag).catch(error => {\n            // tagging failed probably because this tag alredy exists\n            log(error);\n            log('Tagging failed, continuing');\n            return git;\n          });\n        } else {\n          return git;\n        }\n      })\n      .then(git => {\n        if (options.push) {\n          log('Pushing');\n          return git.push(options.remote, options.branch, !options.history);\n        } else {\n          return git;\n        }\n      })\n      .then(\n        () => done(),\n        error => {\n          if (options.silent) {\n            error = new Error(\n              'Unspecified error (run without silent option for detail)'\n            );\n          }\n          done(error);\n        }\n      )\n  );\n};\n\n/**\n * Clean the cache directory.\n */\nexports.clean = function clean() {\n  fs.removeSync(getCacheDir());\n};\n"]},"metadata":{},"sourceType":"script"}