{"ast":null,"code":"import _slicedToArray from\"C:/Users/tlvud/Desktop/react-web/pyp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import Header from\"../components/Header\";import styled from\"styled-components\";//Import Components\n// import CategoryTitleDiv from \"../components/CategoryTitleDiv\";\nimport ItemCell from\"../components/ItemCell\";//Import Style\nimport{MainContainer}from\"./sharedStyle\";//Import JSON data\nimport JSON_DATA from\"../Data3.json\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function loadingScreen(){}export default function WorksList(_ref){var match=_ref.match;var path=match.path;var _useState=useState(true),_useState2=_slicedToArray(_useState,2),loading=_useState2[0],setLoading=_useState2[1];//스크롤을 맨 위로... 상황에 따라 조건이 필요할지도\nwindow.scrollTo(0,0);useEffect(function(){window.onload=function(){setTimeout(function(){return setLoading(false);},500);};console.log(loading);return setLoading(false);});return/*#__PURE__*/_jsx(_Fragment,{children:loading?/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"h1\",{children:\"LOADING,,,\"})}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Header,{nav:\"Works\"}),/*#__PURE__*/_jsx(MainContainer,{paddingToTop:\"10rem\",children:/*#__PURE__*/_jsx(\"div\",{className:\"itemList\",children:JSON_DATA&&JSON_DATA.map(function(item){return/*#__PURE__*/_jsx(ItemCell,{path:path,alt:item.id,thumbImg:process.env.PUBLIC_URL+item.thumb_img,title:item.title,subtitle:item.subtitle},item.id);})})})]})});}/*\r\n211117 카테고리 있는 코드\r\n// const CategoryContainer = styled.div`\r\n//   float: left;\r\n//   width: 100%;\r\n//   margin-bottom: 5vh;\r\n// `;\r\n\r\n{JSON_DATA &&\r\n            JSON_DATA.map((item, idx) => {\r\n              // JSON 오브젝트 나누기\r\n              var a = 0;\r\n              const [keys, entryValues] = Object.entries(item);\r\n              const categoryName = keys[0];\r\n              const innerDataArray = keys[1];\r\n              a += 1;\r\n              return (\r\n                // 카테고리 / 내부데이터 나눠서 생성\r\n                <CategoryContainer key={\"cc\" + idx}>\r\n                  <CategoryTitleDiv key={\"ct\" + idx} desc={categoryName} />\r\n                  {innerDataArray.map((element) => {\r\n                    return (\r\n                      <ItemCell\r\n                        key={element.id}\r\n                        path={path}\r\n                        alt={element.id}\r\n                        thumbImg={process.env.PUBLIC_URL + element.thumb_img}\r\n                        title={element.title}\r\n                        category={element.description}\r\n                      />\r\n                    );\r\n                  })}\r\n                </CategoryContainer>\r\n              );\r\n            })}\r\n \r\n */","map":{"version":3,"sources":["C:/Users/tlvud/Desktop/react-web/pyp/src/pages/WorksList.jsx"],"names":["React","useState","useEffect","Header","styled","ItemCell","MainContainer","JSON_DATA","loadingScreen","WorksList","match","path","loading","setLoading","window","scrollTo","onload","setTimeout","console","log","map","item","id","process","env","PUBLIC_URL","thumb_img","title","subtitle"],"mappings":"2JAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CAEA;AACA;AACA,MAAOC,CAAAA,QAAP,KAAqB,wBAArB,CAEA;AACA,OAASC,aAAT,KAA8B,eAA9B,CAEA;AACA,MAAOC,CAAAA,SAAP,KAAsB,eAAtB,C,6IAEA,QAASC,CAAAA,aAAT,EAAyB,CAAE,CAE3B,cAAe,SAASC,CAAAA,SAAT,MAA8B,IAATC,CAAAA,KAAS,MAATA,KAAS,CAC3C,GAAMC,CAAAA,IAAI,CAAGD,KAAK,CAACC,IAAnB,CACA,cAA8BV,QAAQ,CAAC,IAAD,CAAtC,wCAAOW,OAAP,eAAgBC,UAAhB,eAEA;AACAC,MAAM,CAACC,QAAP,CAAgB,CAAhB,CAAmB,CAAnB,EAEAb,SAAS,CAAC,UAAM,CACdY,MAAM,CAACE,MAAP,CAAgB,UAAM,CACpBC,UAAU,CAAC,iBAAMJ,CAAAA,UAAU,CAAC,KAAD,CAAhB,EAAD,CAA0B,GAA1B,CAAV,CACD,CAFD,CAGAK,OAAO,CAACC,GAAR,CAAYP,OAAZ,EACA,MAAOC,CAAAA,UAAU,CAAC,KAAD,CAAjB,CACD,CANQ,CAAT,CAQA,mBACE,yBACGD,OAAO,cACN,kCACE,kCADF,EADM,cAKN,wCACE,KAAC,MAAD,EAAQ,GAAG,CAAC,OAAZ,EADF,cAGE,KAAC,aAAD,EAAe,YAAY,CAAE,OAA7B,uBACE,YAAK,SAAS,CAAC,UAAf,UACGL,SAAS,EACRA,SAAS,CAACa,GAAV,CAAc,SAACC,IAAD,CAAU,CACtB,mBACE,KAAC,QAAD,EAEE,IAAI,CAAEV,IAFR,CAGE,GAAG,CAAEU,IAAI,CAACC,EAHZ,CAIE,QAAQ,CAAEC,OAAO,CAACC,GAAR,CAAYC,UAAZ,CAAyBJ,IAAI,CAACK,SAJ1C,CAKE,KAAK,CAAEL,IAAI,CAACM,KALd,CAME,QAAQ,CAAEN,IAAI,CAACO,QANjB,EACOP,IAAI,CAACC,EADZ,CADF,CAUD,CAXD,CAFJ,EADF,EAHF,GANJ,EADF,CA+BD,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Header from \"../components/Header\";\r\nimport styled from \"styled-components\";\r\n\r\n//Import Components\r\n// import CategoryTitleDiv from \"../components/CategoryTitleDiv\";\r\nimport ItemCell from \"../components/ItemCell\";\r\n\r\n//Import Style\r\nimport { MainContainer } from \"./sharedStyle\";\r\n\r\n//Import JSON data\r\nimport JSON_DATA from \"../Data3.json\";\r\n\r\nfunction loadingScreen() {}\r\n\r\nexport default function WorksList({ match }) {\r\n  const path = match.path;\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  //스크롤을 맨 위로... 상황에 따라 조건이 필요할지도\r\n  window.scrollTo(0, 0);\r\n\r\n  useEffect(() => {\r\n    window.onload = () => {\r\n      setTimeout(() => setLoading(false), 500);\r\n    };\r\n    console.log(loading);\r\n    return setLoading(false);\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <div>\r\n          <h1>LOADING,,,</h1>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <Header nav=\"Works\" />\r\n\r\n          <MainContainer paddingToTop={\"10rem\"}>\r\n            <div className=\"itemList\">\r\n              {JSON_DATA &&\r\n                JSON_DATA.map((item) => {\r\n                  return (\r\n                    <ItemCell\r\n                      key={item.id}\r\n                      path={path}\r\n                      alt={item.id}\r\n                      thumbImg={process.env.PUBLIC_URL + item.thumb_img}\r\n                      title={item.title}\r\n                      subtitle={item.subtitle}\r\n                    />\r\n                  );\r\n                })}\r\n            </div>\r\n          </MainContainer>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\n/*\r\n211117 카테고리 있는 코드\r\n// const CategoryContainer = styled.div`\r\n//   float: left;\r\n//   width: 100%;\r\n//   margin-bottom: 5vh;\r\n// `;\r\n\r\n{JSON_DATA &&\r\n            JSON_DATA.map((item, idx) => {\r\n              // JSON 오브젝트 나누기\r\n              var a = 0;\r\n              const [keys, entryValues] = Object.entries(item);\r\n              const categoryName = keys[0];\r\n              const innerDataArray = keys[1];\r\n              a += 1;\r\n              return (\r\n                // 카테고리 / 내부데이터 나눠서 생성\r\n                <CategoryContainer key={\"cc\" + idx}>\r\n                  <CategoryTitleDiv key={\"ct\" + idx} desc={categoryName} />\r\n                  {innerDataArray.map((element) => {\r\n                    return (\r\n                      <ItemCell\r\n                        key={element.id}\r\n                        path={path}\r\n                        alt={element.id}\r\n                        thumbImg={process.env.PUBLIC_URL + element.thumb_img}\r\n                        title={element.title}\r\n                        category={element.description}\r\n                      />\r\n                    );\r\n                  })}\r\n                </CategoryContainer>\r\n              );\r\n            })}\r\n \r\n */\r\n"]},"metadata":{},"sourceType":"module"}