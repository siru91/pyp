{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tlvud\\\\Desktop\\\\react-web\\\\pyp\\\\src\\\\pages\\\\WorksList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, Suspense } from \"react\";\nimport Header from \"../components/Header\";\nimport styled from \"styled-components\"; //Import Components\n// import CategoryTitleDiv from \"../components/CategoryTitleDiv\";\n\nimport ItemCell from \"../components/ItemCell\"; //Import Style\n\nimport { MainContainer } from \"./sharedStyle\"; //Import JSON data\n\nimport JSON_DATA from \"../Data3.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WorksList({\n  match\n}) {\n  _s();\n\n  const path = match.path;\n  const [loading, setLoading] = useState(true); //스크롤을 맨 위로... 상황에 따라 조건이 필요할지도\n\n  window.scrollTo(0, 0);\n  useEffect(() => {\n    console.log(\"component mount\");\n    return () => {\n      setLoading(false);\n      console.log(\"component unmount\");\n    };\n  }, [loading]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      nav: \"WORKS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainContainer, {\n      paddingToTop: \"10rem\",\n      children: /*#__PURE__*/_jsxDEV(Suspense, {\n        fallback: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 29\n        }, this),\n        children: [() => {\n          console.log(\"fallback?\");\n        }, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"itemList\",\n          children: JSON_DATA && JSON_DATA.map(item => {\n            return /*#__PURE__*/_jsxDEV(ItemCell, {\n              isConstruction: item.title.includes(\"공사중\"),\n              path: path,\n              alt: item.id,\n              thumbImg: process.env.PUBLIC_URL + item.thumb_img,\n              title: item.title,\n              subtitle: item.subtitle\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n/*\r\n211117 카테고리 있는 코드\r\n// const CategoryContainer = styled.div`\r\n//   float: left;\r\n//   width: 100%;\r\n//   margin-bottom: 5vh;\r\n// `;\r\n\r\n{JSON_DATA &&\r\n            JSON_DATA.map((item, idx) => {\r\n              // JSON 오브젝트 나누기\r\n              var a = 0;\r\n              const [keys, entryValues] = Object.entries(item);\r\n              const categoryName = keys[0];\r\n              const innerDataArray = keys[1];\r\n              a += 1;\r\n              return (\r\n                // 카테고리 / 내부데이터 나눠서 생성\r\n                <CategoryContainer key={\"cc\" + idx}>\r\n                  <CategoryTitleDiv key={\"ct\" + idx} desc={categoryName} />\r\n                  {innerDataArray.map((element) => {\r\n                    return (\r\n                      <ItemCell\r\n                        key={element.id}\r\n                        path={path}\r\n                        alt={element.id}\r\n                        thumbImg={process.env.PUBLIC_URL + element.thumb_img}\r\n                        title={element.title}\r\n                        category={element.description}\r\n                      />\r\n                    );\r\n                  })}\r\n                </CategoryContainer>\r\n              );\r\n            })}\r\n \r\n */\n\n_s(WorksList, \"J7PPXooW06IQ11rfabbvgk72KFw=\");\n\n_c = WorksList;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorksList\");","map":{"version":3,"sources":["C:/Users/tlvud/Desktop/react-web/pyp/src/pages/WorksList.jsx"],"names":["React","useState","useEffect","Suspense","Header","styled","ItemCell","MainContainer","JSON_DATA","WorksList","match","path","loading","setLoading","window","scrollTo","console","log","map","item","title","includes","id","process","env","PUBLIC_URL","thumb_img","subtitle"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,mBAAnB,C,CAEA;AACA;;AACA,OAAOC,QAAP,MAAqB,wBAArB,C,CAEA;;AACA,SAASC,aAAT,QAA8B,eAA9B,C,CAEA;;AACA,OAAOC,SAAP,MAAsB,eAAtB;;;AAEA,eAAe,SAASC,SAAT,CAAmB;AAAEC,EAAAA;AAAF,CAAnB,EAA8B;AAAA;;AAC3C,QAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC,CAF2C,CAI3C;;AACAa,EAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAEA,WAAO,MAAM;AACXJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD,KAHD;AAID,GAPQ,EAON,CAACL,OAAD,CAPM,CAAT;AASA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,GAAG,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,YADF,eAGE,QAAC,aAAD;AAAe,MAAA,YAAY,EAAE,OAA7B;AAAA,6BACE,QAAC,QAAD;AAAU,QAAA,QAAQ,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAApB;AAAA,mBACG,MAAM;AACLI,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD,SAHH,eAIE;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,oBACGT,SAAS,IACRA,SAAS,CAACU,GAAV,CAAeC,IAAD,IAAU;AACtB,gCACE,QAAC,QAAD;AACE,cAAA,cAAc,EAAEA,IAAI,CAACC,KAAL,CAAWC,QAAX,CAAoB,KAApB,CADlB;AAGE,cAAA,IAAI,EAAEV,IAHR;AAIE,cAAA,GAAG,EAAEQ,IAAI,CAACG,EAJZ;AAKE,cAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,UAAZ,GAAyBN,IAAI,CAACO,SAL1C;AAME,cAAA,KAAK,EAAEP,IAAI,CAACC,KANd;AAOE,cAAA,QAAQ,EAAED,IAAI,CAACQ;AAPjB,eAEOR,IAAI,CAACG,EAFZ;AAAA;AAAA;AAAA;AAAA,oBADF;AAWD,WAZD;AAFJ;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AA6BD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAnFwBb,S;;KAAAA,S","sourcesContent":["import React, { useState, useEffect, Suspense } from \"react\";\r\nimport Header from \"../components/Header\";\r\nimport styled from \"styled-components\";\r\n\r\n//Import Components\r\n// import CategoryTitleDiv from \"../components/CategoryTitleDiv\";\r\nimport ItemCell from \"../components/ItemCell\";\r\n\r\n//Import Style\r\nimport { MainContainer } from \"./sharedStyle\";\r\n\r\n//Import JSON data\r\nimport JSON_DATA from \"../Data3.json\";\r\n\r\nexport default function WorksList({ match }) {\r\n  const path = match.path;\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  //스크롤을 맨 위로... 상황에 따라 조건이 필요할지도\r\n  window.scrollTo(0, 0);\r\n\r\n  useEffect(() => {\r\n    console.log(\"component mount\");\r\n\r\n    return () => {\r\n      setLoading(false);\r\n      console.log(\"component unmount\");\r\n    };\r\n  }, [loading]);\r\n\r\n  return (\r\n    <>\r\n      <Header nav=\"WORKS\" />\r\n\r\n      <MainContainer paddingToTop={\"10rem\"}>\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n          {() => {\r\n            console.log(\"fallback?\");\r\n          }}\r\n          <div className=\"itemList\">\r\n            {JSON_DATA &&\r\n              JSON_DATA.map((item) => {\r\n                return (\r\n                  <ItemCell\r\n                    isConstruction={item.title.includes(\"공사중\")}\r\n                    key={item.id}\r\n                    path={path}\r\n                    alt={item.id}\r\n                    thumbImg={process.env.PUBLIC_URL + item.thumb_img}\r\n                    title={item.title}\r\n                    subtitle={item.subtitle}\r\n                  />\r\n                );\r\n              })}\r\n          </div>\r\n        </Suspense>\r\n      </MainContainer>\r\n    </>\r\n  );\r\n}\r\n\r\n/*\r\n211117 카테고리 있는 코드\r\n// const CategoryContainer = styled.div`\r\n//   float: left;\r\n//   width: 100%;\r\n//   margin-bottom: 5vh;\r\n// `;\r\n\r\n{JSON_DATA &&\r\n            JSON_DATA.map((item, idx) => {\r\n              // JSON 오브젝트 나누기\r\n              var a = 0;\r\n              const [keys, entryValues] = Object.entries(item);\r\n              const categoryName = keys[0];\r\n              const innerDataArray = keys[1];\r\n              a += 1;\r\n              return (\r\n                // 카테고리 / 내부데이터 나눠서 생성\r\n                <CategoryContainer key={\"cc\" + idx}>\r\n                  <CategoryTitleDiv key={\"ct\" + idx} desc={categoryName} />\r\n                  {innerDataArray.map((element) => {\r\n                    return (\r\n                      <ItemCell\r\n                        key={element.id}\r\n                        path={path}\r\n                        alt={element.id}\r\n                        thumbImg={process.env.PUBLIC_URL + element.thumb_img}\r\n                        title={element.title}\r\n                        category={element.description}\r\n                      />\r\n                    );\r\n                  })}\r\n                </CategoryContainer>\r\n              );\r\n            })}\r\n \r\n */\r\n"]},"metadata":{},"sourceType":"module"}