{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tlvud\\\\Desktop\\\\react-web\\\\pyp\\\\src\\\\pages\\\\WorksList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, Suspense } from \"react\";\nimport Header from \"../components/Header\";\nimport styled from \"styled-components\"; //Import Components\n// import CategoryTitleDiv from \"../components/CategoryTitleDiv\";\n\nimport ItemCell from \"../components/ItemCell\"; //Import Style\n\nimport { MainContainer } from \"./sharedStyle\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WorksList({\n  match\n}) {\n  _s();\n\n  const path = match.path;\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState(); //스크롤을 맨 위로... 상황에 따라 조건이 필요할지도\n\n  window.scrollTo(0, 0);\n  useEffect(() => {\n    console.log(\"component mount\");\n    return () => {\n      setLoading(false);\n      console.log(\"component unmount\");\n    };\n  }, [loading]); // fetch JSON data\n\n  function fetchData() {\n    fetch(process.env.PUBLIC_URL + \"/Data3.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(response => {\n      return response.json();\n    }).then(myData => {\n      console.log(myData);\n      setData(myData);\n    });\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      nav: \"WORKS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainContainer, {\n      paddingToTop: \"10rem\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"itemList\",\n        children: data && data.map(item => {\n          return /*#__PURE__*/_jsxDEV(ItemCell, {\n            isConstruction: item.title.includes(\"공사중\"),\n            path: path,\n            alt: item.id,\n            thumbImg: process.env.PUBLIC_URL + item.thumb_img,\n            title: item.title,\n            desc: item.desc,\n            subtitle: item.subtitle\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n/*\r\n211117 카테고리 있는 코드\r\n// const CategoryContainer = styled.div`\r\n//   float: left;\r\n//   width: 100%;\r\n//   margin-bottom: 5vh;\r\n// `;\r\n\r\n{JSON_DATA &&\r\n            JSON_DATA.map((item, idx) => {\r\n              // JSON 오브젝트 나누기\r\n              var a = 0;\r\n              const [keys, entryValues] = Object.entries(item);\r\n              const categoryName = keys[0];\r\n              const innerDataArray = keys[1];\r\n              a += 1;\r\n              return (\r\n                // 카테고리 / 내부데이터 나눠서 생성\r\n                <CategoryContainer key={\"cc\" + idx}>\r\n                  <CategoryTitleDiv key={\"ct\" + idx} desc={categoryName} />\r\n                  {innerDataArray.map((element) => {\r\n                    return (\r\n                      <ItemCell\r\n                        key={element.id}\r\n                        path={path}\r\n                        alt={element.id}\r\n                        thumbImg={process.env.PUBLIC_URL + element.thumb_img}\r\n                        title={element.title}\r\n                        category={element.description}\r\n                      />\r\n                    );\r\n                  })}\r\n                </CategoryContainer>\r\n              );\r\n            })}\r\n \r\n */\n\n_s(WorksList, \"99p42S3pWe3Xt3zpbMehJEZF4DY=\");\n\n_c = WorksList;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorksList\");","map":{"version":3,"sources":["C:/Users/tlvud/Desktop/react-web/pyp/src/pages/WorksList.jsx"],"names":["React","useState","useEffect","Suspense","Header","styled","ItemCell","MainContainer","WorksList","match","path","loading","setLoading","data","setData","window","scrollTo","console","log","fetchData","fetch","process","env","PUBLIC_URL","headers","Accept","then","response","json","myData","map","item","title","includes","id","thumb_img","desc","subtitle"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Suspense } from \"react\";\r\nimport Header from \"../components/Header\";\r\nimport styled from \"styled-components\";\r\n\r\n//Import Components\r\n// import CategoryTitleDiv from \"../components/CategoryTitleDiv\";\r\nimport ItemCell from \"../components/ItemCell\";\r\n\r\n//Import Style\r\nimport { MainContainer } from \"./sharedStyle\";\r\n\r\nexport default function WorksList({ match }) {\r\n  const path = match.path;\r\n  const [loading, setLoading] = useState(true);\r\n  const [data, setData] = useState();\r\n\r\n  //스크롤을 맨 위로... 상황에 따라 조건이 필요할지도\r\n  window.scrollTo(0, 0);\r\n\r\n  useEffect(() => {\r\n    console.log(\"component mount\");\r\n\r\n    return () => {\r\n      setLoading(false);\r\n      console.log(\"component unmount\");\r\n    };\r\n  }, [loading]);\r\n\r\n  // fetch JSON data\r\n  function fetchData() {\r\n    fetch(process.env.PUBLIC_URL + \"/Data3.json\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((myData) => {\r\n        console.log(myData);\r\n        setData(myData);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Header nav=\"WORKS\" />\r\n\r\n      <MainContainer paddingToTop={\"10rem\"}>\r\n        <div className=\"itemList\">\r\n          {data &&\r\n            data.map((item) => {\r\n              return (\r\n                <ItemCell\r\n                  isConstruction={item.title.includes(\"공사중\")}\r\n                  key={item.id}\r\n                  path={path}\r\n                  alt={item.id}\r\n                  thumbImg={process.env.PUBLIC_URL + item.thumb_img}\r\n                  title={item.title}\r\n                  desc={item.desc}\r\n                  subtitle={item.subtitle}\r\n                />\r\n              );\r\n            })}\r\n        </div>\r\n      </MainContainer>\r\n    </>\r\n  );\r\n}\r\n\r\n/*\r\n211117 카테고리 있는 코드\r\n// const CategoryContainer = styled.div`\r\n//   float: left;\r\n//   width: 100%;\r\n//   margin-bottom: 5vh;\r\n// `;\r\n\r\n{JSON_DATA &&\r\n            JSON_DATA.map((item, idx) => {\r\n              // JSON 오브젝트 나누기\r\n              var a = 0;\r\n              const [keys, entryValues] = Object.entries(item);\r\n              const categoryName = keys[0];\r\n              const innerDataArray = keys[1];\r\n              a += 1;\r\n              return (\r\n                // 카테고리 / 내부데이터 나눠서 생성\r\n                <CategoryContainer key={\"cc\" + idx}>\r\n                  <CategoryTitleDiv key={\"ct\" + idx} desc={categoryName} />\r\n                  {innerDataArray.map((element) => {\r\n                    return (\r\n                      <ItemCell\r\n                        key={element.id}\r\n                        path={path}\r\n                        alt={element.id}\r\n                        thumbImg={process.env.PUBLIC_URL + element.thumb_img}\r\n                        title={element.title}\r\n                        category={element.description}\r\n                      />\r\n                    );\r\n                  })}\r\n                </CategoryContainer>\r\n              );\r\n            })}\r\n \r\n */\r\n"]},"metadata":{},"sourceType":"module"}