{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/tlvud/Desktop/react-web/pyp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React from\"react\";import Header from\"../components/Header\";import styled from\"styled-components\";//Import Components\nimport CategoryTitleDiv from\"../components/CategoryTitleDiv\";import ItemCell from\"../components/ItemCell\";//Import Style\nimport{MainContainer}from\"./sharedStyle\";//Import JSON data\n// import JSON_DATA from \"../Data.json\";\n// import JSON_DATA from \"../Data2.json\";\nimport JSON_DATA from\"../Data3.json\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Grid=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: grid;\\n  width: 100%;\\n  margin-bottom: 5vh;\\n\"])));export default function WorksList(_ref){var match=_ref.match;var path=match.path;//스크롤을 맨 위로... 상황에 따라 조건이 필요할지도\nwindow.scrollTo(0,0);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Header,{nav:\"Works\"}),/*#__PURE__*/_jsx(MainContainer,{paddingToTop:\"15rem\",children:/*#__PURE__*/_jsx(\"div\",{className:\"itemList\",children:JSON_DATA&&JSON_DATA.map(function(item){return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(ItemCell,{path:path,alt:item.id,thumbImg:process.env.PUBLIC_URL+item.thumb_img,title:item.title,subtitle:item.subtitle},item.id)});})})})]});}/*\r\n211117 카테고리 있는 코드\r\n// const CategoryContainer = styled.div`\r\n//   float: left;\r\n//   width: 100%;\r\n//   margin-bottom: 5vh;\r\n// `;\r\n\r\n{JSON_DATA &&\r\n            JSON_DATA.map((item, idx) => {\r\n              // JSON 오브젝트 나누기\r\n              var a = 0;\r\n              const [keys, entryValues] = Object.entries(item);\r\n              const categoryName = keys[0];\r\n              const innerDataArray = keys[1];\r\n              a += 1;\r\n              return (\r\n                // 카테고리 / 내부데이터 나눠서 생성\r\n                <CategoryContainer key={\"cc\" + idx}>\r\n                  <CategoryTitleDiv key={\"ct\" + idx} desc={categoryName} />\r\n                  {innerDataArray.map((element) => {\r\n                    return (\r\n                      <ItemCell\r\n                        key={element.id}\r\n                        path={path}\r\n                        alt={element.id}\r\n                        thumbImg={process.env.PUBLIC_URL + element.thumb_img}\r\n                        title={element.title}\r\n                        category={element.description}\r\n                      />\r\n                    );\r\n                  })}\r\n                </CategoryContainer>\r\n              );\r\n            })}\r\n \r\n */","map":{"version":3,"sources":["C:/Users/tlvud/Desktop/react-web/pyp/src/pages/WorksList.jsx"],"names":["React","Header","styled","CategoryTitleDiv","ItemCell","MainContainer","JSON_DATA","Grid","div","WorksList","match","path","window","scrollTo","map","item","id","process","env","PUBLIC_URL","thumb_img","title","subtitle"],"mappings":"+LAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CAEA;AACA,MAAOC,CAAAA,gBAAP,KAA6B,gCAA7B,CACA,MAAOC,CAAAA,QAAP,KAAqB,wBAArB,CAEA;AACA,OAASC,aAAT,KAA8B,eAA9B,CAEA;AACA;AACA;AACA,MAAOC,CAAAA,SAAP,KAAsB,eAAtB,C,6IAEA,GAAMC,CAAAA,IAAI,CAAGL,MAAM,CAACM,GAAV,4HAAV,CAKA,cAAe,SAASC,CAAAA,SAAT,MAA8B,IAATC,CAAAA,KAAS,MAATA,KAAS,CAC3C,GAAMC,CAAAA,IAAI,CAAGD,KAAK,CAACC,IAAnB,CAEA;AACAC,MAAM,CAACC,QAAP,CAAgB,CAAhB,CAAmB,CAAnB,EAEA,mBACE,wCACE,KAAC,MAAD,EAAQ,GAAG,CAAC,OAAZ,EADF,cAGE,KAAC,aAAD,EAAe,YAAY,CAAE,OAA7B,uBACE,YAAK,SAAS,CAAC,UAAf,UACGP,SAAS,EACRA,SAAS,CAACQ,GAAV,CAAc,SAACC,IAAD,CAAU,CACtB,mBACE,sCACE,KAAC,QAAD,EAEE,IAAI,CAAEJ,IAFR,CAGE,GAAG,CAAEI,IAAI,CAACC,EAHZ,CAIE,QAAQ,CAAEC,OAAO,CAACC,GAAR,CAAYC,UAAZ,CAAyBJ,IAAI,CAACK,SAJ1C,CAKE,KAAK,CAAEL,IAAI,CAACM,KALd,CAME,QAAQ,CAAEN,IAAI,CAACO,QANjB,EACOP,IAAI,CAACC,EADZ,CADF,EADF,CAYD,CAbD,CAFJ,EADF,EAHF,GADF,CAyBD,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\r\nimport Header from \"../components/Header\";\r\nimport styled from \"styled-components\";\r\n\r\n//Import Components\r\nimport CategoryTitleDiv from \"../components/CategoryTitleDiv\";\r\nimport ItemCell from \"../components/ItemCell\";\r\n\r\n//Import Style\r\nimport { MainContainer } from \"./sharedStyle\";\r\n\r\n//Import JSON data\r\n// import JSON_DATA from \"../Data.json\";\r\n// import JSON_DATA from \"../Data2.json\";\r\nimport JSON_DATA from \"../Data3.json\";\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  width: 100%;\r\n  margin-bottom: 5vh;\r\n`;\r\nexport default function WorksList({ match }) {\r\n  const path = match.path;\r\n\r\n  //스크롤을 맨 위로... 상황에 따라 조건이 필요할지도\r\n  window.scrollTo(0, 0);\r\n\r\n  return (\r\n    <>\r\n      <Header nav=\"Works\" />\r\n\r\n      <MainContainer paddingToTop={\"15rem\"}>\r\n        <div className=\"itemList\">\r\n          {JSON_DATA &&\r\n            JSON_DATA.map((item) => {\r\n              return (\r\n                <>\r\n                  <ItemCell\r\n                    key={item.id}\r\n                    path={path}\r\n                    alt={item.id}\r\n                    thumbImg={process.env.PUBLIC_URL + item.thumb_img}\r\n                    title={item.title}\r\n                    subtitle={item.subtitle}\r\n                  />\r\n                </>\r\n              );\r\n            })}\r\n        </div>\r\n      </MainContainer>\r\n    </>\r\n  );\r\n}\r\n\r\n/*\r\n211117 카테고리 있는 코드\r\n// const CategoryContainer = styled.div`\r\n//   float: left;\r\n//   width: 100%;\r\n//   margin-bottom: 5vh;\r\n// `;\r\n\r\n{JSON_DATA &&\r\n            JSON_DATA.map((item, idx) => {\r\n              // JSON 오브젝트 나누기\r\n              var a = 0;\r\n              const [keys, entryValues] = Object.entries(item);\r\n              const categoryName = keys[0];\r\n              const innerDataArray = keys[1];\r\n              a += 1;\r\n              return (\r\n                // 카테고리 / 내부데이터 나눠서 생성\r\n                <CategoryContainer key={\"cc\" + idx}>\r\n                  <CategoryTitleDiv key={\"ct\" + idx} desc={categoryName} />\r\n                  {innerDataArray.map((element) => {\r\n                    return (\r\n                      <ItemCell\r\n                        key={element.id}\r\n                        path={path}\r\n                        alt={element.id}\r\n                        thumbImg={process.env.PUBLIC_URL + element.thumb_img}\r\n                        title={element.title}\r\n                        category={element.description}\r\n                      />\r\n                    );\r\n                  })}\r\n                </CategoryContainer>\r\n              );\r\n            })}\r\n \r\n */\r\n"]},"metadata":{},"sourceType":"module"}