{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tlvud\\\\Desktop\\\\react-web\\\\pyp\\\\src\\\\pages\\\\Works__\\\\Viaf2021.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, Suspense } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { ss } from \"..\"; // import JSON_DATA from \"../../Data3.json\";\n\nimport Header from \"../../components/Header\";\nimport IntroHolder from \"../../components/IntroHolder\";\nimport ContributionChart from \"../../components/ContributionChart\";\nimport LinkButton from \"../../components/Button\";\nimport { fetchJsonData } from \"../../shared/FetchApi\"; // import {* as viaf} from \"../../image\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Viaf2021({\n  match,\n  history\n}) {\n  _s();\n\n  // JSON 파일을 만들어서 ContentsId랑 일치하는 오브젝트 불러오기\n  var data = null;\n  var imagesUrls = [];\n  var imagesObjectUrls = [];\n  var videoUrls = [];\n  const contentsId = match.params.contentsId; // const [currentData, setCurrentData] = useState(() => {\n  //   JSON_DATA.map((item) => {\n  //     if (item.id == contentsId) {\n  //       data = item;\n  //       data.images.map((item) => {\n  //         //배열 형태에 전달\n  //         imagesUrls.push(process.env.PUBLIC_URL + item);\n  //         //오브젝트 형태에 전달 <- 이미지갤러리 등에 쓰는 경우\n  //         imagesObjectUrls.push({ original: process.env.PUBLIC_URL + item });\n  //         return;\n  //       });\n  //       // 비디오+public 폴더 주소 합치기\n  //       data.videos.map((item) => {\n  //         videoUrls.push(process.env.PUBLIC_URL + item);\n  //         return;\n  //       });\n  //     } else {\n  //       return <div>Somethings wrong!</div>;\n  //     }\n  //   });\n  // });\n\n  const [d, setD] = useState({});\n  const [isScrolled, setScrollActive] = useState(false);\n  const [scrollValue, setScrollValue] = useState(0);\n\n  const handleScroll = () => {\n    const scrollPos = window.scrollY;\n    setScrollValue(scrollPos);\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    window.removeEventListener(\"scroll\", handleScroll);\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, []);\n  useEffect(() => {\n    async function fetch() {\n      const response = await IntroPage;\n      console.log(\"RESPONSE\" + response.data);\n      setD(response.data);\n    }\n\n    fetch();\n  }, []);\n\n  function fetchData() {\n    fetch(\"data3.json\").then(response => {});\n  }\n\n  function IntroPage() {\n    const d = JSON_DATA.map(item => {\n      if (item.id == contentsId) {\n        data = item;\n        data.images.map(item => {\n          //배열 형태에 전달\n          imagesUrls.push(process.env.PUBLIC_URL + item); //오브젝트 형태에 전달 <- 이미지갤러리 등에 쓰는 경우\n\n          imagesObjectUrls.push({\n            original: process.env.PUBLIC_URL + item\n          });\n          return;\n        }); // 비디오+public 폴더 주소 합치기\n\n        data.videos.map(item => {\n          videoUrls.push(process.env.PUBLIC_URL + item);\n          return;\n        });\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Somethings wrong!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 16\n        }, this);\n      }\n    });\n    console.log(\"title::\" + d);\n    return /*#__PURE__*/_jsxDEV(IntroHolder, {\n      title: d.title,\n      client: d.client,\n      period: d.period,\n      subtitle: d.subtitle,\n      team: d.team // results={data.results.map((item, idx) => {\n      //   return (\n      //     <span key={idx}>\n      //       {item}\n      //       <br />\n      //     </span>\n      //   );\n      // })}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this);\n  } // JSON_DATA.map((item) => {\n  //   if (item.id == contentsId) {\n  //     data = item;\n  //     return;\n  //   }\n  //   return <div>Somethings wrong!</div>;\n  // });\n  // // 이미지+public 폴더 주소 합치기\n  // data.images.map((item) => {\n  //   //배열 형태에 전달\n  //   imagesUrls.push(process.env.PUBLIC_URL + item);\n  //   //오브젝트 형태에 전달 <- 이미지갤러리 등에 쓰는 경우\n  //   imagesObjectUrls.push({ original: process.env.PUBLIC_URL + item });\n  //   return;\n  // });\n  // // 비디오+public 폴더 주소 합치기\n  // data.videos.map((item) => {\n  //   videoUrls.push(process.env.PUBLIC_URL + item);\n  //   return;\n  // });\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      nav: \"WORKS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ss.HeadContainer, {\n      textColor: \"white\",\n      children: [/*#__PURE__*/_jsxDEV(ss.HeadContainerImg, {\n        src: require(\"../../image/vban.jpg\").default\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"titleText Holder\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"01\",\n          children: \"VIA Festival 2021\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Loading profile...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 27\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(IntroPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Viaf2021, \"+IX1h5ey+jBxtANvLS3kTPXzG7w=\");\n\n_c = Viaf2021;\n\nvar _c;\n\n$RefreshReg$(_c, \"Viaf2021\");","map":{"version":3,"sources":["C:/Users/tlvud/Desktop/react-web/pyp/src/pages/Works__/Viaf2021.jsx"],"names":["React","useState","useEffect","Suspense","styled","css","ss","Header","IntroHolder","ContributionChart","LinkButton","fetchJsonData","Viaf2021","match","history","data","imagesUrls","imagesObjectUrls","videoUrls","contentsId","params","d","setD","isScrolled","setScrollActive","scrollValue","setScrollValue","handleScroll","scrollPos","window","scrollY","scrollTo","removeEventListener","addEventListener","fetch","response","IntroPage","console","log","fetchData","then","JSON_DATA","map","item","id","images","push","process","env","PUBLIC_URL","original","videos","title","client","period","subtitle","team","require","default"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Suspense } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { ss } from \"..\";\r\n// import JSON_DATA from \"../../Data3.json\";\r\n\r\nimport Header from \"../../components/Header\";\r\nimport IntroHolder from \"../../components/IntroHolder\";\r\nimport ContributionChart from \"../../components/ContributionChart\";\r\nimport LinkButton from \"../../components/Button\";\r\n\r\nimport { fetchJsonData } from \"../../shared/FetchApi\";\r\n\r\n// import {* as viaf} from \"../../image\";\r\n\r\nexport default function Viaf2021({ match, history }) {\r\n  // JSON 파일을 만들어서 ContentsId랑 일치하는 오브젝트 불러오기\r\n\r\n  var data = null;\r\n  var imagesUrls = [];\r\n  var imagesObjectUrls = [];\r\n  var videoUrls = [];\r\n  const contentsId = match.params.contentsId;\r\n\r\n  // const [currentData, setCurrentData] = useState(() => {\r\n  //   JSON_DATA.map((item) => {\r\n  //     if (item.id == contentsId) {\r\n  //       data = item;\r\n\r\n  //       data.images.map((item) => {\r\n  //         //배열 형태에 전달\r\n  //         imagesUrls.push(process.env.PUBLIC_URL + item);\r\n\r\n  //         //오브젝트 형태에 전달 <- 이미지갤러리 등에 쓰는 경우\r\n  //         imagesObjectUrls.push({ original: process.env.PUBLIC_URL + item });\r\n  //         return;\r\n  //       });\r\n\r\n  //       // 비디오+public 폴더 주소 합치기\r\n  //       data.videos.map((item) => {\r\n  //         videoUrls.push(process.env.PUBLIC_URL + item);\r\n  //         return;\r\n  //       });\r\n  //     } else {\r\n  //       return <div>Somethings wrong!</div>;\r\n  //     }\r\n  //   });\r\n  // });\r\n  const [d, setD] = useState({});\r\n  const [isScrolled, setScrollActive] = useState(false);\r\n  const [scrollValue, setScrollValue] = useState(0);\r\n\r\n  const handleScroll = () => {\r\n    const scrollPos = window.scrollY;\r\n    setScrollValue(scrollPos);\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    window.removeEventListener(\"scroll\", handleScroll);\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", handleScroll);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function fetch() {\r\n      const response = await IntroPage;\r\n      console.log(\"RESPONSE\" + response.data);\r\n      setD(response.data);\r\n    }\r\n    fetch();\r\n  }, []);\r\n\r\n  function fetchData() {\r\n    fetch(\"data3.json\").then((response) => {});\r\n  }\r\n\r\n  function IntroPage() {\r\n    const d = JSON_DATA.map((item) => {\r\n      if (item.id == contentsId) {\r\n        data = item;\r\n\r\n        data.images.map((item) => {\r\n          //배열 형태에 전달\r\n          imagesUrls.push(process.env.PUBLIC_URL + item);\r\n\r\n          //오브젝트 형태에 전달 <- 이미지갤러리 등에 쓰는 경우\r\n          imagesObjectUrls.push({ original: process.env.PUBLIC_URL + item });\r\n          return;\r\n        });\r\n\r\n        // 비디오+public 폴더 주소 합치기\r\n        data.videos.map((item) => {\r\n          videoUrls.push(process.env.PUBLIC_URL + item);\r\n          return;\r\n        });\r\n      } else {\r\n        return <div>Somethings wrong!</div>;\r\n      }\r\n    });\r\n    console.log(\"title::\" + d);\r\n    return (\r\n      <IntroHolder\r\n        title={d.title}\r\n        client={d.client}\r\n        period={d.period}\r\n        subtitle={d.subtitle}\r\n        team={d.team}\r\n        // results={data.results.map((item, idx) => {\r\n        //   return (\r\n        //     <span key={idx}>\r\n        //       {item}\r\n        //       <br />\r\n        //     </span>\r\n        //   );\r\n        // })}\r\n      />\r\n    );\r\n  }\r\n\r\n  // JSON_DATA.map((item) => {\r\n  //   if (item.id == contentsId) {\r\n  //     data = item;\r\n  //     return;\r\n  //   }\r\n  //   return <div>Somethings wrong!</div>;\r\n  // });\r\n\r\n  // // 이미지+public 폴더 주소 합치기\r\n  // data.images.map((item) => {\r\n  //   //배열 형태에 전달\r\n  //   imagesUrls.push(process.env.PUBLIC_URL + item);\r\n\r\n  //   //오브젝트 형태에 전달 <- 이미지갤러리 등에 쓰는 경우\r\n  //   imagesObjectUrls.push({ original: process.env.PUBLIC_URL + item });\r\n  //   return;\r\n  // });\r\n\r\n  // // 비디오+public 폴더 주소 합치기\r\n  // data.videos.map((item) => {\r\n  //   videoUrls.push(process.env.PUBLIC_URL + item);\r\n  //   return;\r\n  // });\r\n\r\n  return (\r\n    <>\r\n      <Header nav={\"WORKS\"} />\r\n      <ss.HeadContainer textColor=\"white\">\r\n        {/* <ss.BackBtn onClick={() => history.goBack()}>뒤로</ss.BackBtn> */}\r\n        <ss.HeadContainerImg src={require(\"../../image/vban.jpg\").default} />\r\n        <div className=\"titleText Holder\">\r\n          <div className=\"01\">VIA Festival 2021</div>\r\n        </div>\r\n      </ss.HeadContainer>\r\n      <Suspense fallback={<h1>Loading profile...</h1>}>\r\n        <IntroPage />\r\n      </Suspense>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}