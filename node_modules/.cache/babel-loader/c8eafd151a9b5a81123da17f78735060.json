{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tlvud\\\\Desktop\\\\react-web\\\\pyp\\\\src\\\\pages\\\\Coc2016.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { ss } from \".\";\nimport ImageGallery from \"react-image-gallery\";\nimport JSON_DATA from \"../Data2.json\";\nimport Header from \"../components/Header\";\nimport Items from \"./Contents__Items\";\nimport gallStyle from \"./Gallery.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Coc2016({\n  match,\n  history\n}) {\n  _s();\n\n  // JSON 파일을 만들어서 ContentsId랑 일치하는 오브젝트 불러오기\n  const contentsId = match.params.contentsId;\n  const [isScrolled, setScrollActive] = useState(false);\n  const [backType, setBackType] = useState(\"img\");\n  var textData = {};\n  var data = null;\n  var imagesUrls = [];\n  var videoUrls = [];\n  window.scrollTo(0, 0);\n  JSON_DATA.map(item => {\n    // JSON 오브젝트 나누기\n    const [keys, entryValues] = Object.entries(item);\n    keys[1].map(element => {\n      if (element.id == contentsId) {\n        textData[0] = element;\n        return;\n      }\n    });\n  }); //이미지 배열의 형태 변경\n\n  data = textData[0];\n  data.images.map(item => {\n    imagesUrls.push({\n      original: process.env.PUBLIC_URL + item\n    });\n    return;\n  });\n  data.videos.map(item => {\n    videoUrls.push(process.env.PUBLIC_URL + item);\n    return;\n  });\n  useEffect(() => {\n    setBackType(data.banner_type);\n  }); //Render\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Header, {\n      nav: \"WORKS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Coc2016, \"d/gz9oiQw8bkqCJFE72ymSvIk4M=\");\n\n_c = Coc2016;\n\nvar _c;\n\n$RefreshReg$(_c, \"Coc2016\");","map":{"version":3,"sources":["C:/Users/tlvud/Desktop/react-web/pyp/src/pages/Coc2016.jsx"],"names":["React","useState","useEffect","styled","css","ss","ImageGallery","JSON_DATA","Header","Items","gallStyle","Coc2016","match","history","contentsId","params","isScrolled","setScrollActive","backType","setBackType","textData","data","imagesUrls","videoUrls","window","scrollTo","map","item","keys","entryValues","Object","entries","element","id","images","push","original","process","env","PUBLIC_URL","videos","banner_type"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B;AACA,SAASC,EAAT,QAAmB,GAAnB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AAEA,OAAOC,SAAP,MAAsB,eAAtB;;;AAEA,eAAe,SAASC,OAAT,CAAiB;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAjB,EAAqC;AAAA;;AAClD;AACA,QAAMC,UAAU,GAAGF,KAAK,CAACG,MAAN,CAAaD,UAAhC;AACA,QAAM,CAACE,UAAD,EAAaC,eAAb,IAAgChB,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACiB,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,KAAD,CAAxC;AACA,MAAImB,QAAQ,GAAG,EAAf;AACA,MAAIC,IAAI,GAAG,IAAX;AACA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,SAAS,GAAG,EAAhB;AAEAC,EAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;AAEAlB,EAAAA,SAAS,CAACmB,GAAV,CAAeC,IAAD,IAAU;AACtB;AACA,UAAM,CAACC,IAAD,EAAOC,WAAP,IAAsBC,MAAM,CAACC,OAAP,CAAeJ,IAAf,CAA5B;AACAC,IAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQF,GAAR,CAAaM,OAAD,IAAa;AACvB,UAAIA,OAAO,CAACC,EAAR,IAAcnB,UAAlB,EAA8B;AAC5BM,QAAAA,QAAQ,CAAC,CAAD,CAAR,GAAcY,OAAd;AACA;AACD;AACF,KALD;AAMD,GATD,EAZkD,CAsBlD;;AACAX,EAAAA,IAAI,GAAGD,QAAQ,CAAC,CAAD,CAAf;AAEAC,EAAAA,IAAI,CAACa,MAAL,CAAYR,GAAZ,CAAiBC,IAAD,IAAU;AACxBL,IAAAA,UAAU,CAACa,IAAX,CAAgB;AAAEC,MAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,UAAZ,GAAyBZ;AAArC,KAAhB;AACA;AACD,GAHD;AAKAN,EAAAA,IAAI,CAACmB,MAAL,CAAYd,GAAZ,CAAiBC,IAAD,IAAU;AACxBJ,IAAAA,SAAS,CAACY,IAAV,CAAeE,OAAO,CAACC,GAAR,CAAYC,UAAZ,GAAyBZ,IAAxC;AACA;AACD,GAHD;AAKAzB,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,WAAW,CAACE,IAAI,CAACoB,WAAN,CAAX;AACD,GAFQ,CAAT,CAnCkD,CAuClD;;AACA,sBACE;AAAA,2BACE,QAAC,MAAD;AAAQ,MAAA,GAAG,EAAE;AAAb;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD;;GA7CuB9B,O;;KAAAA,O","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { ss } from \".\";\r\nimport ImageGallery from \"react-image-gallery\";\r\nimport JSON_DATA from \"../Data2.json\";\r\nimport Header from \"../components/Header\";\r\nimport Items from \"./Contents__Items\";\r\n\r\nimport gallStyle from \"./Gallery.css\";\r\n\r\nexport default function Coc2016({ match, history }) {\r\n  // JSON 파일을 만들어서 ContentsId랑 일치하는 오브젝트 불러오기\r\n  const contentsId = match.params.contentsId;\r\n  const [isScrolled, setScrollActive] = useState(false);\r\n  const [backType, setBackType] = useState(\"img\");\r\n  var textData = {};\r\n  var data = null;\r\n  var imagesUrls = [];\r\n  var videoUrls = [];\r\n\r\n  window.scrollTo(0, 0);\r\n\r\n  JSON_DATA.map((item) => {\r\n    // JSON 오브젝트 나누기\r\n    const [keys, entryValues] = Object.entries(item);\r\n    keys[1].map((element) => {\r\n      if (element.id == contentsId) {\r\n        textData[0] = element;\r\n        return;\r\n      }\r\n    });\r\n  });\r\n  //이미지 배열의 형태 변경\r\n  data = textData[0];\r\n\r\n  data.images.map((item) => {\r\n    imagesUrls.push({ original: process.env.PUBLIC_URL + item });\r\n    return;\r\n  });\r\n\r\n  data.videos.map((item) => {\r\n    videoUrls.push(process.env.PUBLIC_URL + item);\r\n    return;\r\n  });\r\n\r\n  useEffect(() => {\r\n    setBackType(data.banner_type);\r\n  });\r\n\r\n  //Render\r\n  return (\r\n    <>\r\n      <Header nav={\"WORKS\"} />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}